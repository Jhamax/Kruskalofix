Analisis Algoritma Divide and Conquer untuk Mencari Jarak Terkecil Antar Titik

1. Penjelasan Ide Dasar Algoritma

Algoritma ini menggunakan pendekatan Divide and Conquer untuk mencari jarak terkecil antar titik di bidang dua dimensi. Ide dasarnya adalah:

- Divide (Membagi): Memecah kumpulan titik menjadi dua bagian berdasarkan koordinat X, yaitu bagian kiri dan kanan.
- Conquer (Mengolah): Mencari jarak terkecil secara rekursif pada kedua bagian tersebut.
- Combine (Menggabungkan): Setelah didapat jarak terkecil dari kiri dan kanan, mencari kemungkinan jarak lebih kecil yang melibatkan titik dari kedua bagian dengan membatasi pencarian di sekitar garis pemisah.

Dengan cara ini, algoritma menghindari pengecekan semua pasangan titik secara langsung (brute force) yang memakan waktu lebih lama.

2. Langkah-Langkah Pembagian Data

    1. Titik-titik diurutkan berdasarkan nilai koordinat X.
    2. Titik dibagi menjadi dua bagian kira-kira sama banyak pada posisi tengah.
    3. Algoritma dipanggil secara rekursif pada bagian kiri dan kanan.
    4. Setelah hasil rekursif didapat, dibuat strip yaitu kumpulan titik-titik yang berada dekat dengan garis tengah (jarak X dari garis tengah kurang dari jarak terkecil yang ditemukan).
    5. Pada strip ini, jarak antar titik diperiksa secara terbatas berdasarkan koordinat Y untuk menemukan jarak terkecil yang mungkin melewati batas pembagian.

3. Analisis Kompleksitas Waktu

- Divide and Conquer ini memiliki kompleksitas waktu sekitar O(n log n):
  - Pengurutan awal titik memakan waktu O(n log n).
  - Setiap pemanggilan rekursif membagi titik menjadi dua bagian dan melakukan pencarian jarak di strip dalam waktu O(n).
  - Total pemanggilan rekursif mengikuti pola pembagian seperti pada algoritma merge sort, sehingga menghasilkan waktu O(n log n).

- Brute force memeriksa semua pasangan titik, dengan kompleksitas waktu O(nÂ²) karena ada sekitar n*(n-1)/2 pasangan.

4. Perbandingan Hasil dan Efisiensi dengan Brute Force

- Hasil kedua metode sama-sama memberikan jarak terkecil yang benar.
- Efisiensi:
  - Algoritma brute force cepat untuk jumlah titik kecil, tetapi lambat dan tidak praktis untuk data besar karena kompleksitas kuadrat.
  - Divide and Conquer lebih efisien dan scalable untuk data besar dengan kompleksitas logaritmik.

5. Kesimpulan Pribadi: Kelebihan dan Kelemahan Divide and Conquer pada Tiap Kasus

- Kelebihan:
  - Efisien untuk dataset besar, mengurangi jumlah perhitungan secara drastis.
  - Struktur algoritma rekursif memudahkan implementasi yang terstruktur.
  - Dapat dioptimalkan lebih lanjut (misalnya dengan teknik pruning di strip).

- Kelemahan:
  - Implementasi lebih kompleks dibanding brute force, memerlukan pemahaman rekursi dan pengurutan.
  - Untuk dataset sangat kecil, overhead rekursi dan pembagian bisa membuatnya kurang efisien dibanding brute force.
  - Perlu data terurut agar algoritma dapat berjalan optimal, sehingga ada tambahan waktu untuk pengurutan awal.
